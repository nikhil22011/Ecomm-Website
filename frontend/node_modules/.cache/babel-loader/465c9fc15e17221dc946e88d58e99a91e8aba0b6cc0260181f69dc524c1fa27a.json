{"ast":null,"code":"import { create } from 'zustand';\nexport const useCartStore = create((set, get) => ({\n  // initialize from localStorage or empty\n  cart: JSON.parse(localStorage.getItem('cart')) || [],\n  addToCart: (id, name, price, imageUrl) => {\n    set(state => {\n      const existingIndex = state.cart.findIndex(item => item.id === id);\n      let updatedCart;\n      if (existingIndex !== -1) {\n        // increment quantity\n        updatedCart = state.cart.map((item, idx) => idx === existingIndex ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item);\n      } else {\n        // new item\n        updatedCart = [...state.cart, {\n          id,\n          name,\n          price: parseFloat(price),\n          imageUrl,\n          quantity: 1\n        }];\n      }\n      localStorage.setItem('cart', JSON.stringify(updatedCart));\n      return {\n        cart: updatedCart\n      };\n    });\n  },\n  changeQuantity: (index, change) => {\n    set(state => {\n      const updatedCart = [...state.cart];\n      updatedCart[index].quantity += change;\n      if (updatedCart[index].quantity <= 0) {\n        updatedCart.splice(index, 1);\n      }\n      localStorage.setItem('cart', JSON.stringify(updatedCart));\n      return {\n        cart: updatedCart\n      };\n    });\n  },\n  removeFromCart: index => {\n    set(state => {\n      const updatedCart = [...state.cart];\n      updatedCart.splice(index, 1);\n      localStorage.setItem('cart', JSON.stringify(updatedCart));\n      return {\n        cart: updatedCart\n      };\n    });\n  },\n  getTotalAmount: () => {\n    return get().cart.reduce((total, item) => total + item.price * item.quantity, 0);\n  },\n  deleteCart: () => {\n    set({\n      cart: []\n    });\n    localStorage.setItem('cart', JSON.stringify([]));\n  }\n}));","map":{"version":3,"names":["create","useCartStore","set","get","cart","JSON","parse","localStorage","getItem","addToCart","id","name","price","imageUrl","state","existingIndex","findIndex","item","updatedCart","map","idx","quantity","parseFloat","setItem","stringify","changeQuantity","index","change","splice","removeFromCart","getTotalAmount","reduce","total","deleteCart"],"sources":["/Users/demo/Downloads/ecommerce-main 2/frontend/src/store/useCartStore.js"],"sourcesContent":["import { create } from 'zustand';\n\nexport const useCartStore = create((set, get) => ({\n    // initialize from localStorage or empty\n    cart: JSON.parse(localStorage.getItem('cart')) || [],\n\n    addToCart: (id, name, price, imageUrl) => {\n    set(state => {\n        const existingIndex = state.cart.findIndex(item => item.id === id);\n        let updatedCart;\n        if (existingIndex !== -1) {\n        // increment quantity\n        updatedCart = state.cart.map((item, idx) =>\n            idx === existingIndex\n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        );\n        } else {\n        // new item\n            updatedCart = [\n                ...state.cart,\n                { id, name, price: parseFloat(price), imageUrl, quantity: 1 }\n            ];\n        }\n        localStorage.setItem('cart', JSON.stringify(updatedCart));\n        return { cart: updatedCart };\n    });\n    },\n\n    changeQuantity: (index, change) => {\n    set(state => {\n        const updatedCart = [...state.cart];\n        updatedCart[index].quantity += change;\n        if (updatedCart[index].quantity <= 0) {\n        updatedCart.splice(index, 1);\n        }\n        localStorage.setItem('cart', JSON.stringify(updatedCart));\n        return { cart: updatedCart };\n    });\n    },\n\n    removeFromCart: (index) => {\n    set(state => {\n        const updatedCart = [...state.cart];\n        updatedCart.splice(index, 1);\n        localStorage.setItem('cart', JSON.stringify(updatedCart));\n        return { cart: updatedCart };\n    });\n    },\n\n    getTotalAmount: () => {\n    return get().cart.reduce((total, item) => total + item.price * item.quantity, 0);\n    },\n    deleteCart: () => {\n        set({ cart: [] });\n        localStorage.setItem('cart', JSON.stringify([]));\n    },\n}));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}